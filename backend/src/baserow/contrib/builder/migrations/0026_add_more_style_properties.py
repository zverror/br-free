# Generated by Django 4.1.13 on 2024-06-12 10:20

import django.db.models.deletion
from django.db import migrations, models

import baserow.core.fields


def migrate_element_styles(apps, schema_editor):
    """
    Migrates on model element styles into the style property.
    """

    ButtonElement = apps.get_model("builder", "buttonelement")
    HeadingElement = apps.get_model("builder", "headingelement")
    LinkElement = apps.get_model("builder", "linkelement")
    TextElement = apps.get_model("builder", "textelement")
    ImageElement = apps.get_model("builder", "imageelement")
    TableElement = apps.get_model("builder", "tableelement")
    FormContainerElement = apps.get_model("builder", "formcontainerelement")

    elements_to_update = []
    for element in HeadingElement.objects.all():
        # Migrate heading alignments
        if element.alignment != "left":
            element.styles.setdefault("typography", {}).update(
                {f"heading_{element.level}_text_alignment": element.alignment}
            )
            elements_to_update.append(element)
    HeadingElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in ButtonElement.objects.all():
        # Migrate button alignements
        if element.alignment != "left":
            element.styles.setdefault("button", {}).update(
                {"button_alignment": element.alignment}
            )
            elements_to_update.append(element)
    ButtonElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in LinkElement.objects.all():
        # Migrate link elements depending on the variant
        if element.variant == "button":
            if "button" not in element.styles:
                element.styles["button"] = {}
            if element.alignment != "left":
                element.styles["button"]["button_alignment"] = element.alignment
            if element.width != "auto":
                element.styles["button"]["button_width"] = element.width
        else:
            if element.alignment != "left":
                element.styles.setdefault("link", {})[
                    "link_text_alignment"
                ] = element.alignment

        elements_to_update.append(element)
    LinkElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in TextElement.objects.all():
        # Migrate text alignement
        if element.alignment != "left":
            element.styles.setdefault("typography", {})[
                "body_text_alignment"
            ] = element.alignment
            elements_to_update.append(element)
    TextElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in ImageElement.objects.all():
        if "image" not in element.styles:
            element.styles["image"] = {}
        # Copy all the image styles
        if element.style_image_constraint != "contain":
            element.styles["image"]["image_constraint"] = element.style_image_constraint
        if element.alignment != "left":
            element.styles["image"]["image_alignment"] = element.alignment
        if element.style_max_width != 100:
            element.styles["image"]["image_max_width"] = element.style_max_width
        if element.style_max_height:
            element.styles["image"]["image_max_height"] = element.style_max_height

        elements_to_update.append(element)
    ImageElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    # Force table button to center for compatibility with existing tables
    TableElement.objects.all().update(styles={"button": {"button_alignment": "center"}})

    # Force form container button to right as it was before
    FormContainerElement.objects.all().update(
        styles={"button": {"button_alignment": "right"}}
    )


class Migration(migrations.Migration):
    dependencies = [
        ("builder", "0025_buttonthemeconfigblock_colorthemeconfigblock_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="buttonthemeconfigblock",
            name="button_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="buttonthemeconfigblock",
            name="button_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="center",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="buttonthemeconfigblock",
            name="button_width",
            field=models.CharField(
                choices=[("auto", "Auto"), ("full", "Full")],
                default="auto",
                max_length=10,
            ),
        ),
        migrations.CreateModel(
            name="LinkThemeConfigBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_text_alignment",
                    models.CharField(
                        choices=[
                            ("left", "Left"),
                            ("center", "Center"),
                            ("right", "Right"),
                        ],
                        default="left",
                        max_length=10,
                    ),
                ),
                (
                    "link_text_color",
                    models.CharField(
                        blank=True,
                        default="primary",
                        help_text="The text color of links",
                        max_length=20,
                    ),
                ),
                (
                    "link_hover_text_color",
                    models.CharField(
                        blank=True,
                        default="#96baf6ff",
                        help_text="The hover color of links when hovered",
                        max_length=20,
                    ),
                ),
                (
                    "builder",
                    baserow.core.fields.AutoOneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="builder.builder",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="body_text_color",
            field=models.CharField(default="#070810ff", max_length=9),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="body_font_size",
            field=models.SmallIntegerField(default=14),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="body_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_1_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_2_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_3_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_4_text_color",
            field=models.CharField(default="#070810ff", max_length=9),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_4_font_size",
            field=models.SmallIntegerField(default=16),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_4_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_5_text_color",
            field=models.CharField(default="#070810ff", max_length=9),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_5_font_size",
            field=models.SmallIntegerField(default=14),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_5_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_6_text_color",
            field=models.CharField(default="#202128", max_length=9),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_6_font_size",
            field=models.SmallIntegerField(default=14),
        ),
        migrations.AddField(
            model_name="typographythemeconfigblock",
            name="heading_6_text_alignment",
            field=models.CharField(
                choices=[("left", "Left"), ("center", "Center"), ("right", "Right")],
                default="left",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="tableelement",
            name="button_load_more_label",
            field=baserow.core.formula.field.FormulaField(
                blank=True,
                default="",
                help_text="The label of the show more button",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="repeatelement",
            name="button_load_more_label",
            field=baserow.core.formula.field.FormulaField(
                blank=True,
                default="",
                help_text="The label of the show more button",
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="ImageThemeConfigBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image_alignment",
                    models.CharField(
                        choices=[
                            ("left", "Left"),
                            ("center", "Center"),
                            ("right", "Right"),
                        ],
                        default="left",
                        max_length=10,
                    ),
                ),
                (
                    "image_max_width",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="The max-width for this image element.",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, message="Value cannot be less than 0."
                            ),
                            django.core.validators.MaxValueValidator(
                                100, message="Value cannot be greater than 100."
                            ),
                        ],
                    ),
                ),
                (
                    "image_max_height",
                    models.PositiveIntegerField(
                        help_text="The max-height for this image element.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                5, message="Value cannot be less than 5."
                            ),
                            django.core.validators.MaxValueValidator(
                                3000, message="Value cannot be greater than 3000."
                            ),
                        ],
                    ),
                ),
                (
                    "image_constraint",
                    models.CharField(
                        choices=[
                            ("cover", "Cover"),
                            ("contain", "Contain"),
                            ("full-width", "Full Width"),
                        ],
                        default="contain",
                        help_text="The image constraint to apply to this image",
                        max_length=32,
                    ),
                ),
                (
                    "builder",
                    baserow.core.fields.AutoOneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="builder.builder",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(
            migrate_element_styles, reverse_code=migrations.RunPython.noop
        ),
    ]
