# Generated by Django 4.1.13 on 2024-05-31 12:52
import re

import django.db.models.deletion
from django.db import migrations, models

import baserow.core.fields
from baserow.core.utils import lighten_color

rgba_hex_color_regex = re.compile(r"#([A-Fa-f0-9]{8})")


def migrate_config_blocks(apps, schema_editor):
    MainThemeConfigBlock = apps.get_model("builder", "mainthemeconfigblock")
    ColorThemeConfigBlock = apps.get_model("builder", "colorthemeconfigblock")
    TypographyThemeConfigBlock = apps.get_model("builder", "typographythemeconfigblock")
    ButtonThemeConfigBlock = apps.get_model("builder", "buttonthemeconfigblock")

    for main in MainThemeConfigBlock.objects.all():
        ColorThemeConfigBlock.objects.create(
            builder=main.builder,
            primary_color=main.primary_color,
            secondary_color=main.secondary_color,
            border_color=main.border_color,
        )
        TypographyThemeConfigBlock.objects.create(
            builder=main.builder,
            heading_1_font_size=main.heading_1_font_size,
            heading_1_text_color=main.heading_1_color,
            heading_2_font_size=main.heading_2_font_size,
            heading_2_text_color=main.heading_2_color,
            heading_3_font_size=main.heading_3_font_size,
            heading_3_text_color=main.heading_3_color,
        )
        ButtonThemeConfigBlock.objects.create(builder=main.builder)


def migrate_element_styles(apps, schema_editor):
    """
    Migrates on model element styles into the style property.
    """

    Element = apps.get_model("builder", "element")
    Element.objects.update(styles={})

    ColorThemeConfigBlock = apps.get_model("builder", "colorthemeconfigblock")
    ButtonElement = apps.get_model("builder", "buttonelement")
    HeadingElement = apps.get_model("builder", "headingelement")
    LinkElement = apps.get_model("builder", "linkelement")
    FormContainerElement = apps.get_model("builder", "formcontainerelement")
    TableElement = apps.get_model("builder", "tableelement")

    # Load color_theme cache
    color_theme_cache = {c.builder_id: c for c in ColorThemeConfigBlock.objects.all()}

    def _lighten_color(element, color):
        if color == "secondary":
            color_theme = color_theme_cache[element.page.builder_id]
            return lighten_color(color_theme.secondary_color, 0.3)

        if color == "border":
            color_theme = color_theme_cache[element.page.builder_id]
            return lighten_color(color_theme.border_color, 0.3)

        if rgba_hex_color_regex.fullmatch(color):
            return lighten_color(color, 0.3)

        # By default we return initial color, that's the best we can do but it shouldn't
        # happen
        return color

    elements_to_update = []
    for heading in HeadingElement.objects.all():
        if heading.font_color != "default":
            heading.styles["typography"] = {
                f"heading_{heading.level}_text_color": heading.font_color
            }
            elements_to_update.append(heading)
    HeadingElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in ButtonElement.objects.select_related("page").all():
        if element.button_color != "primary":
            element.styles["button"] = {"button_background_color": element.button_color}
            element.styles["button"]["button_hover_background_color"] = _lighten_color(
                element, element.button_color
            )
            elements_to_update.append(element)
    ButtonElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in LinkElement.objects.select_related("page").all():
        if element.button_color != "primary":
            element.styles["button"] = {"button_background_color": element.button_color}
            element.styles["button"]["button_hover_background_color"] = _lighten_color(
                element, element.button_color
            )
            elements_to_update.append(element)

    LinkElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)

    elements_to_update = []
    for element in FormContainerElement.objects.select_related("page").all():
        if element.button_color != "primary":
            element.styles["button"] = {"button_background_color": element.button_color}
            element.styles["button"]["button_hover_background_color"] = _lighten_color(
                element, element.button_color
            )
            elements_to_update.append(element)
    FormContainerElement.objects.bulk_update(
        elements_to_update, ["styles"], batch_size=100
    )

    elements_to_update = []
    for element in TableElement.objects.select_related("page").all():
        if element.button_color != "primary":
            element.styles["button"] = {"button_background_color": element.button_color}
            element.styles["button"]["button_hover_background_color"] = _lighten_color(
                element, element.button_color
            )
            elements_to_update.append(element)
    TableElement.objects.bulk_update(elements_to_update, ["styles"], batch_size=100)


class Migration(migrations.Migration):
    dependencies = [
        ("builder", "0024_element_role_type_element_roles"),
    ]

    operations = [
        migrations.CreateModel(
            name="ButtonThemeConfigBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "button_background_color",
                    models.CharField(
                        blank=True,
                        default="primary",
                        help_text="The background color of buttons",
                        max_length=20,
                    ),
                ),
                (
                    "button_hover_background_color",
                    models.CharField(
                        blank=True,
                        default="#96baf6ff",
                        help_text="The background color of buttons when hovered",
                        max_length=20,
                    ),
                ),
                (
                    "builder",
                    baserow.core.fields.AutoOneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="builder.builder",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ColorThemeConfigBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("primary_color", models.CharField(default="#5190efff", max_length=9)),
                (
                    "secondary_color",
                    models.CharField(default="#0eaa42ff", max_length=9),
                ),
                ("border_color", models.CharField(default="#d7d8d9ff", max_length=9)),
                (
                    "builder",
                    baserow.core.fields.AutoOneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="builder.builder",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TypographyThemeConfigBlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("heading_1_font_size", models.SmallIntegerField(default=24)),
                (
                    "heading_1_text_color",
                    models.CharField(default="#070810ff", max_length=9),
                ),
                ("heading_2_font_size", models.SmallIntegerField(default=20)),
                (
                    "heading_2_text_color",
                    models.CharField(default="#070810ff", max_length=9),
                ),
                ("heading_3_font_size", models.SmallIntegerField(default=16)),
                (
                    "heading_3_text_color",
                    models.CharField(default="#070810ff", max_length=9),
                ),
                (
                    "builder",
                    baserow.core.fields.AutoOneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="builder.builder",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="element",
            name="styles",
            field=models.JSONField(
                default=dict,
                help_text="The theme overrides for this element",
                null=True,
            ),
        ),
        migrations.RunPython(
            migrate_config_blocks, reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            migrate_element_styles, reverse_code=migrations.RunPython.noop
        ),
    ]
